# Copyright VMware, Inc.
# SPDX-License-Identifier: APACHE-2.0

version: "2"

services:
  kafka:
    container_name: "kafka"
    image: docker.io/bitnami/kafka:3.6
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@<your_host>:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  postgres-users:
    container_name: "postgres-users"
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: costi
      POSTGRES_DB: app-users
    command: [ "postgres", "-c", "wal_level=logical" ]
  postgres-auth:
    container_name: "postgres-auth"
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: costi
      POSTGRES_DB: app-auth
    command: [ "postgres", "-c", "wal_level=logical" ]
  postgres-groups:
    container_name: "postgres-groups"
    image: postgres:16-alpine
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: costi
      POSTGRES_DB: app-groups
    command: [ "postgres", "-c", "wal_level=logical" ]
  debezium:
    container_name: "debezium"
    image: quay.io/debezium/connect:2.4
    ports:
      - "8083:8083"
    links:
      - kafka
      - postgres-users
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_statuses
  mongodb-query:
    container_name: 'mongodb-query'
    image: 'mongo:latest'
    command: ["--replSet", "dbrs", "--bind_ip_all"]
    environment:
      - 'MONGO_INITDB_DATABASE=query'
    ports:
      - '27017:27017'
    expose:
      - '27017'
    volumes:
      - ./tmp/db:/data/db
      - ${PWD}/rs-initiate.js:/docker-entrypoint-initdb.d/rs-initiate.js
  mongodb-messages:
    container_name: 'mongodb-messages'
    image: 'mongo:latest'
    command: [ "--replSet", "dbrs", "--bind_ip_all" ]
    environment:
      - 'MONGO_INITDB_DATABASE=messages'
    ports:
      - '27018:27017'
    expose:
      - '27018'
    volumes:
      - ./tmp2/db:/data/db
      - ${PWD}/rs-initiate.js:/docker-entrypoint-initdb.d/rs-initiate.js
  mongodb-calls:
    container_name: 'mongodb-calls'
    image: 'mongo:latest'
    command: [ "--replSet", "dbrs", "--bind_ip_all" ]
    environment:
      - 'MONGO_INITDB_DATABASE=calls'
    ports:
      - '27019:27017'
    expose:
      - '27019'
    volumes:
      - ./tmp3/db:/data/db
      - ${PWD}/rs-initiate.js:/docker-entrypoint-initdb.d/rs-initiate.js
  redis-gateway:
    container_name: 'redis-gateway'
    image: redis:latest
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
  gateway-microservice:
    container_name: "gateway"
    image: constatin1215/gateway-ms:v1
    ports:
      - "8080:8080"
    depends_on:
      - kafka
  users-microservice:
    container_name: "users-ms"
    image: constatin1215/users-ms:v1
    depends_on:
      - kafka
      - postgres-users
  auth-microservice:
    container_name: "auth-ms"
    image: constatin1215/auth-ms:v1
    depends_on:
      - kafka
      - postgres-auth
  dispatch-microservice:
    container_name: "dispatch-ms"
    image: constatin1215/dispatch-ms:v1
    depends_on:
      - kafka
  query-microservice:
    container_name: "query-ms"
    image: constatin1215/query-ms:v1
    depends_on:
      - kafka
      - mongodb-query
  groups-microservice:
    container_name: "groups-ms"
    image: constatin1215/groups-ms:v1
    depends_on:
      - kafka
      - postgres-groups
  messaging-microservice:
    container_name: "messaging-ms"
    image: constatin1215/messaging-ms:v1
    depends_on:
      - kafka
      - mongodb-messages
  calls-microservice:
    container_name: "calls-ms"
    image: constatin1215/calls-ms:v1
    depends_on:
      - kafka
      - mongodb-calls
volumes:
  kafka_data:
    driver: local
